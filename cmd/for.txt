for /L %x  in (1, 1, 100) do echo %x			start at 1, step by one, finish at 100
for /f "tokens=4,5*" %i in ('dir') do @echo %i %j %k	get 4th and 5th columns of dir result
for /f %i in (test.txt) do @echo %i			first token of each line

syntax:
FOR %variable IN (set) DO command [command-parameters]
%variable		single letter replaceable parameter
(set)			a set of one or more files. (wildcards are possible)
command			the command to carry out for each file
command-parameters	parameters or switches for the specified command

FOR /D %variable IN (set) DO command [command-parameters]
FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]
FOR /L %variable IN (start,step,end) DO command [command-parameters]

FOR /F ["options"] %variable IN (file-set) DO command [command-parameters]
FOR /F ["options"] %variable IN ("string") DO command [command-parameters]
FOR /F ["options"] %variable IN ('command') DO command [command-parameters]


"options"
eol=c		specifies an end of line comment character (just one)
skip=n		specifies the number of lines to skip at the beginning of the file.
delims=xxx	specifies a delimiter set.  This replaces the default delimiter set of space and tab.
tokens=x,y,m-n	specifies which tokens from each line are to be passed to the for body for each iteration.
		This will cause additional variable names to be allocated.
		The m-n form is a range, specifying the mth through the nth tokens.
		If the last character in the tokens= string is an asterisk, then an additional variable is allocated and receives the remaining text on the line after the last token parsed.
usebackq	a back quoted string is executed as a command
		and a single quoted string is a literal string command and allows the use of double quotes to quote file names in file-set.