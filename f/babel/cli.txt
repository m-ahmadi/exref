babel main.js 					output to stdout
babel main.js -o app.js				output to a file
babel main.js -o app.js --watch			compile a file every time that you change it
babel main.js -o app.js --source-maps		add a source map file
babel main.js -o app.js --source-maps inline	inline source maps
babel src -d dist				compile src directory, output to lib directory
babel src -o app.js				compile src directory, output to one concatenated file
babel src -d dist --ignore hold.js,test.js	ignore 2 files
babel src -d dist --ignore @*.js		ignore all files starting with @
babel src -d dist --ignore lib			ignore a folder
babel src -d dist --copy-files			copy files that will not be compiled
babel src -d dist --presets @babel/env		using a preset
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
options:
-f, --filename [filename]			filename to use when reading from stdin - this will be used in source-maps, errors etc
-o, --out-file [out]				compile all input files into a single file
-d, --out-dir [out]				compile an input directory of modules into an output directory
-s, --source-maps [true|false|inline|both]
-x, --extensions [extensions]			list of extensions to compile when a directory has been input [.es6,.js,.es,.jsx,.mjs]
-w, --watch					recompile files on changes
    --skip-initial-build			do not compile files before watching
-D, --copy-files				when compiling a directory copy over non-compilable files
-M, --module-ids				insert an explicit id for modules
    --ignore [list]				list of glob paths to **not** compile
    --only [list]				list of glob paths to **only** compile
    --no-comments				write comments to generated output (true by default)
    --delete-dir-on-start			delete the out directory before compilation
    --minified					save as much bytes when printing [true|false]
    --compact [true|false|auto]			do not include superfluous whitespace characters and line terminators
    --presets [list]				comma-separated list of preset names
    --plugins [list]				comma-separated list of plugin names
    --config-file [path]			Path to a .babelrc file to use
    --env-name [name]				the name of the 'env' to use when loading configs and plugins. defaults to the value of BABEL_ENV, or else NODE_ENV, or else 'development'.
    --root-mode [mode]				the project-root resolution mode. options: 'root'|'upward'|'upward-optional' default: 'root'
    --source-type [script|module]
    --no-babelrc				whether or not to look up .babelrc and .babelignore files
    --no-highlight-code				enable/disable ANSI syntax highlighting of code frames (on by default)
    --retain-lines				retain line numbers - will result in really ugly code
    --auxiliary-comment-before [string]		print a comment before any injected non-user code
    --auxiliary-comment-after [string]		print a comment after any injected non-user code
    --source-map-target [string]		set `file` on returned source map
    --source-file-name [string]			set `sources[0]` on returned source map
    --source-root [filename]			the root from which all sources are relative
    --module-root [filename]			optional prefix for the amd module formatter that will be prepend to the filename on module definitions
    --module-id [string]			specify a custom name for module ids
    --keep-file-extension			Preserve the file extensions of the input files
    --relative					compile into an output directory relative to input directory or file. Requires --out-dir [out]
    --include-dotfiles				include dotfiles when compiling and copying non-compilable files
    --verbose					log everything
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------