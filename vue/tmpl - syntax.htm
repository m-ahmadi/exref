interpolation
<p>{{ msg }}</p>          access data.props
<p v-once>{{ msg }}</p>   one-time only (affects all bindings on the same node)
<p>{{ rawHtml }}</p>      raw html treated as plain text
<p v-html="rawHtml"></p>  use `v-html` for html (data bindings in rawHtml are ignored, sfc scoped styles not applied to rawHtml)
<p id="{{foo}}" />        error. can't use interpolation in attrs

expression
{{ num + 1 }}
{{ ok ? 'YES' : 'NO' }}
{{ message.split(',') }}
{{ var a = 1 }}           error. no statement    allowed, only single expression
{{ if (ok) { do() } }}    error. no flow control allowed, only ternary

available globals
	Infinity undefined NaN isFinite isNaN parseFloat parseInt
	decodeURI decodeURIComponent encodeURI encodeURIComponent
	Math Number Date Array Object Boolean String RegExp Map Set JSON Intl
	require
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
directives
<p v-directive:argument="expression" /> only a single expression (except in v-for)

<p v-bind:href="prop" />     bind href to data.prop (bindSrc=data.prop bindTarget= href)
<p v-bind:id="prop" />       ...
<p v-if="prop" />            not rendered if data.prop is falsy
<p v-bind:id="'my-' + id" /> expression
<p v-bind:disabled="x" />    attr not included if x is null|undefined|false
<p v-on:click="method" />    bind methods.method to 'click' event

dynamic argument (2.6+)
<p v-directive:[attrExpression]="valueExpression" />

<p v-bind:[myAttr]="foo" />      valueExpression must evaluate to string (except if null)
<p v-bind:[myAttr]="null" />     null can be used to explicitly remove the binding
<p v-bind:['foo' + bar]="foo" /> error. attrExpression cannot contain any spaces or quotes
<p v-bind:[myAttr]="foo" />      if using in-dom templates, browser coerces attr name to lowercase: `myattr`

modifier
<p v-directive:argument.modifier="expression" />

<p v-on:submit.prevent="fn" /> call event.preventDefault() on triggered events

shorthand
<p v-bind:attr="expr" /> v-bind full syntax
<p :attr="foo" />        shorthand
<p :[attr]="foo" />      dynamic arg shorthand (2.6+)

<p v-on:event="expr" />  v-on full syntax
<p @event="expr" />      shorthand
<p @[event]="expr" />    dynamic arg shorthand (2.6+)

ref
<p
v-text=           "str"
v-html=           "str"
v-show=           "any"
v-if=             "any"
v-else
v-else-if=        "any"
v-for=            "[] | {} | 0 | '' | Iterable(2.6+)"
v-on:event=       "()=> | statement | {}" stop|prevent|capture|self|keyCode|keyAlia|native|once|left|right|middle|passive
v-bind:attrOrProp="arg ? any : {}"        prop|camel|sync
v-model=          "only for <input> <select> <textarea> <Component>" lazy|number|trim
v-slot:name=      "only for <template>"
v-pre
v-cloak
v-once
/>

v-for
<li v-for="[] | {} | 0 | '' | Iterable(2.6+)">
	{{ i }}
</li>

<li v-for="i in arr"></li>                 no `:key` for simple content
<li v-for="i in arr" :key="i.id"></li>     key must be unique. (best to always use keys if possible, used as a hint for vdom alg)
<li v-for="i in arr"></li>                 for in
<li v-for="i of arr"></li>                 for of
<li v-for="(val, idx) in arr"></li>
<li v-for="val in obj"></li>               with object
<li v-for="(val, key) in obj"></li>        ...
<li v-for="n in 10"></li>                  number range
<li v-for="n in 'abc'"></li>               spreaded string
<li v-for="i in arr" v-if="!i.prop"></li>  with v-if
<Foo v-for="i in items" :key="i.id"></Foo> on a component

v-on
<button v-on:click="method"></button>                      addEvenetListener('click', methods.method)
<button v-on:[event]="method"></button>                    dynamic event (2.6+)
<button v-on:click="method('hello', $event)" />            inline statement
<button @click="method"></button>                          shorthand
<button @[event]="method"></button>                        shorthand dynamic event (2.6+)
<button @click.stop="method" />                            stop propagation
<button @click.prevent="method" />                         prevent default
<form @submit.prevent />                                   prevent default without expression
<button @click.stop.prevent="method" />                    chain modifiers
<input @keyup.enter="method" />                            key modifier using keyAlias
<input @keyup.13="method" />                               key modifier using keyCode
<button @click.once="method" />                            triggered only once
<button v-on="{ mousedown: method1, mouseup: method2 }" /> object syntax (2.4+)
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
class style

class
<p class="foo" />                  static
<p :class="{ foo: prop }" />       object syntax (.active only if prop is truthy)
<p :class="{ 'foo-bar': prop }" /> ... quoted keys
<p :class="obj" />                 ... a data.obj instead of inline obj (or computed prop)
<p :class="[foo, bar]" />          array syntax
<p :class="[a ? foo : '', bar]" /> ... expression
<p :class="[{ a: foo }, bar]" />   combination

style
<p :style="{ cssProp: expression}" />     object syntax
<p :style="{ fontSize: prop + 'px' }" />  camelCase or quoted kebab-case css prop
<p :style="obj" />                        ... a data.obj instead of inline obj (or computed prop)
<p :style="[prop1, prop2]" />             array syntax
<p :style="{ color: ['a', 'b', ...] }" /> multiple (prefixed) values
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
special attrs
<p :key />
<p ref="p" />               vm.$refs.p
<child ref="child"></child> vm.$refs.child
<p :is="str|obj" />         used in-dom templates (due to limitations of < ul|ol|table|select and li|tr|option />)