resolution switching (different sizes/resolutions)
	offer the browser several image files, all showing the same image but with different pixels

art direction (different images)
	offer the browser several image files, different images suitable for different space allocations
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
resolution switching
<img src="pic-800w.jpg" alt="My picture" />

<img
srcset="pic-320w.jpg 320w,
				pic-480w.jpg 480w,
				pic-800w.jpg 800w"
sizes="(max-width: 320px) 280px,
       (max-width: 480px) 440px,
       800px"
src="pic-800w.jpg" alt="My picture" />

`srcset`: the set of images we will allow the browser to choose between, and what size each image is.
before each comma, we write:
	an image filename (pic-480w.jpg)
	a space
	the image's inherent width in pixels (480w) —> (this uses the w unit, not px)


`sizes`: a set of media conditions (screen widths) and indicates what image size would be best to choose, when certain media conditions are true
before each comma, we write:
	a media condition (max-width:480px) —> (when the viewport width is 480 pixels or less)
	a space
	the width of the slot the image will fill when the media condition is true (440px)

with these attributes in place, the browser will:
	look at its device width
	work out which media condition in the `sizes` list is the first one to be true
	look at the slot size given to that media query
	load the image referenced in the `srcset` list that most closely matches the chosen slot size
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
resolution switching: same size, different resolutions
let the browser choose an appropriate resolution image by using `srcset` with x-descriptors and without `sizes`:
<img
srcset="pic-320w.jpg,
				pic-480w.jpg 1.5x,
				pic-640w.jpg 2x"
src="pic-640w.jpg"
alt="My picture" />

the following css is applied to the image so that it will have a width of 320 pixels on the screen (also called css pixels):

img {
  width: 320px;
}

in this case, `sizes` is not needed
	the browser simply works out what resolution the display is that it is being shown on,
	and serves the most appropriate image referenced in the srcset.

standard/low resolution device (1 device pixel per css pixel):
	pic-320w.jpg image will be loaded (1x is implied, no need to include)

high resolution device (2 device pixels per css pixel or more):
	pic-640w.jpg image will be loaded
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
art direction
<picture>
  <source media="(max-width: 799px)" srcset="pic-480w-close-portrait.jpg">
  <source media="(min-width: 800px)" srcset="pic-800w.jpg">
  <img src="pic-800w.jpg" alt="My picture">
</picture>


<source> element:
	`media` attr: a media condition that decide which image is displayed (like `srcset`: first one that returns true)
		if viewport width: 799px or less: first <source> image will be displayed
		if viewport width: 800px or more: second <source> image will be displayed

	`srcset` attr: contain the path to the image to display
		<source> can take a `srcset` attribute with multiple images referenced, and a sizes attribute too (like <img> in aboe example)
		so you could offer multiple images via a <picture> element, but then also offer multiple resolutions of each one too.

	you must provide an <img> element, with src and alt, right before </picture>, otherwise no images will appear.
	this provides a default case that will apply when none of the media conditions return true
	and a fallback for browsers that don't support the <picture> element
	(you could actually remove the second <source> element in this example)
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@