pip install <pkg> <requirements>	install package
	-U, --upgrade			update already installed package to latest
	-I, --ignore-installed		ignore install pkgs & overwrite
	--force-reinstall
	-q, --quiet			print nothing
	-r requirements.txt		from file
	-e .				install local project (from `setup.py`)
	--report file.json		save report of installed pkgs to file
	--dry-run			don't actually install anything

python -m pip install -U pip		update pip itself

pip list				show installed packages
pip show <pkg>				show info of installed pacakge
pip uninstall -y <pkg> 			delete package
pip freeze > requirements.txt		output installed pkgs in requirements format
pip -V					show version and where pip comes from (depends which python installation is in PATH)

delete all packages
	pip freeze > requirements.txt
	pip uninstall -y -r requirements.txt

install pkg and save it in requirements.txt
	pip install foo && pip freeze | findstr foo >> requirements.txt

get info about to be installed pkgs
	pip install pkg --report f.json			save report of what happened
	pip install pkg --dry-run --report f.json	... without installing
	pip install pkg --dry-run -I --report f.json	... ignore installed pkgs

--------------------------------------------------------------------------------
<requirements>

pkg==1.3
pkg==2.0.*
pkg>=1.2,<2.0
pkg~=1.4.2
pkg==5.4; python_version<'3.8'
pkg[foo, bar]
pkg;sys_platform=='win32'
pkg@file:///somewhere/...
https://pip.pypa.io/en/stable/cli/pip_install
#commented
--------------------------------------------------------------------------------
