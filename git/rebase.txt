git rebase master		use state of some branch as new base of work
git rebase --onto master	?
git rebase --onto master~2	?

git rebase -i HEAD~3					rebase prev 3 commits                                   (changes "CommitDate")
git rebase -i HEAD~3 --ignore-date			... use current time as "AuthorDate" of rebased commits (changes both dates)
git rebase -i HEAD~3 --reset-author-date		... ...
git rebase -i HEAD~3 --committer-date-is-author-date	... use "AuthorDate" of rebased commits as "CommitDate" (changes no dates)
git rebase --continue					after `e, edit`, `m, merge`, ...
git rebase --abort					cancel
git rebase --edit-todo					edit the "rebase instructions" file

--------------------------------------------------------------------------------
example - basic

git rebase -i HEAD~5 --ignore-date
	reword abc1111 1	change msg (in opened editor)
	squash abc2222 2	make part of 1
	drop abc2222 3		its files are deleted/modified immediately (best to backup)
	edit abc3333 4		edit commit changes (operation breaks midway to allow edit)
	pick abc4444 5		don't touch

		now edit commit 3: (remove a file)
git rm file.txt
git commit -m "3 corrected" --amend

git rebase --continue		finish

done.

notes:
this will reset the "AuthorDate" of all rebased commits to now
without `--ignore-date` "AuthorDate" is kept same but "CommitDate" is still changed
--------------------------------------------------------------------------------
example - recommit without changing "AuthorDate" or "CommitDate"

git rebase -i HEAD~2 --committer-date-is-author-date
	reword abc1111 2
	pick abc2222 2
		reword abc1111 as: 1
done.

git log --pretty=fuller
	"AuthorDate" or "CommitDate" of commit abc1111 hasn't changed
--------------------------------------------------------------------------------
example - recommit with fully changed dates ("AuthorDate" and "CommitDate")

git rebase -i HEAD~2
	edit abc1111 1
	edit abc2222 2

git log -1 --pretty=%at > _ && set /p GIT_AUTHOR_DATE=<_ && set /p GIT_COMMITTER_DATE=<_ && del _
git commit -m "1" --amend
git rebase --continue

git log -1 --pretty=%at > _ && set /p GIT_AUTHOR_DATE=<_ && set /p GIT_COMMITTER_DATE=<_ && del _
git commit -m "2" --amend
git rebase --continue

done.

note:
if `commit -C <hash> --ammend`, commit's date still comes from env vars (due to higher precedence)
==================================================
another way (avoid since not shown correctly in github, not sure)

git rebase -i HEAD~2 --committer-date-is-author-date
git commit -m "1" --amend
git rebase --continue
git commit -m "2" --amend
git rebase --continue
--------------------------------------------------------------------------------
-i, --interactive commands:

note:
	lines executed top to down (can be reordered)
	commit will be lost if not mentioned (picked, reworded, ...)
	abort on empty file

p, pick <commit>	use commit
r, reword <commit>	use commit, edit msg (opens separate editor for msg)
e, edit <commit>	use commit, edit msg & content
s, squash <commit>	use commit, add its changes to prev commit (prev line in this file, not commit's parent)
x, exec <command>	run command (rest of line) using shell
b, break		stop here (continue rebase later with `git rebase --continue`)
d, drop <commit>	remove commit
l, label <label>	label current HEAD with a name
t, reset <label>	reset HEAD to a label

f, fixup [-C|-c] <commit>
	like "squash" but keep only prev commit log msg
	-C	keep only this commit's message
	-c	... but opens editor

m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
	create a merge commit using original merge commit's message
	(or the oneline, if no original merge commit was specified)
	use -c <commit> to reword commit message
--------------------------------------------------------------------------------